''
'' a very simple virtual machine
'' instructions:
'' 00 = HALT: stops machine
'' 01 = PUSHIM X: push(X)
'' 02 = LOAD: push(memory[pop()])
'' 03 = STORE: a = pop(); memory[a] = pop()
'' 04 = ADD:   b = pop(); a = pop(); push(a+b)
'' 05 = SUB:   b = pop(); a = pop(); push(a-b)
'' 06 = JZ X:  a = pop(); if (a == 0) PC = X
'' 07 = JNEG X: a = pop(); if (a < 0) PC = X
'' 08 = PINLO: a = pop(); drvl a
'' 09 = PINHI: a = pop(); drvh a
'' 0A = PRSTR long: prints string pointed to by "long"
'' 0B = PRHEX: prints hex value at top of stack
'' 0C = GETCNT: push(getct()) // push current cycle counter
'' 0D = DELAY: wait for number of cycles on top of stack
'' 0E = DUP: duplicate top of stack
'' 0F = SWAP: swap top two elements of stack
''
CON
  #0
  OP_HALT, OP_PUSHIM, OP_LOAD, OP_STORE
  OP_ADD, OP_SUB, OP_JZ, OP_JNEG
  OP_PINLO, OP_PINHI, OP_PRSTR, OP_PRHEX
  OP_GETCNT, OP_DELAY, OP_DUP, OP_SWAP

DAT
	org	0
entry
	jmp	#interpreter_start
#include "util_serial.spin2"
interpreter_start
#ifdef USE_PLAIN
#include "sample_plain.spin2"
#elseifdef USE_XBYTE
#include "sample_xbyte.spin2"
#elseifdef USE_JIT
#include "sample_jit.spin2"
#else
#error no interpreter specified
#endif

	 orgh
'#include "blink.bytecode"
#include "timing.bytecode"

	alignl
	long 0[1024]
stack_base
	long 0[1024]
