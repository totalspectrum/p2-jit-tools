''
'' JIT interpreter for sample bytecode
''
'#define DEBUG_ENGINE

interpreter_start
		'' initialize serial
		call	#ser_init

		'' initialize JIT compiler
		call	#jit_init
		
		'' set the stack pointer
		loc	ptra, #@stack_base
		'' and the initial PC
		loc	ptrb, #@InitialPC

		'' print a message
		mov	uart_str, ##@start_message
		call	#ser_str
		
		'' now run forever
		jmp    #jit_set_pc

address_mask	long   $000fffff

		'' here's the main entry point that the JIT calls;
		'' ptrb points at the bytecode to compile
compile_bytecode
		rdbyte	jit_instr, ptrb++
		cmp	jit_instr, #$10 wcz	' make sure it's a valid instruction
	if_ae	mov	jit_instr, #0		' if not, replace with HALT

		alts	jit_instr, #opcode_table
		mov	temp, 0-0		' fetch pattern
		mov	pb, temp		' save a copy in pb
		and	temp, address_mask	' extract the address
		jmp	temp  			' and go do it

std_compiler_routine
		'' most instructions can be compiled by just outputting a pattern
		'' "pb" contains 12 bits: 3 bit count of pattern, and 9 bit pattern
		mov	 jit_instrptr, pb
		shr	 jit_instrptr, #20
		and	 jit_instrptr, #$1ff	' isolate pointer to instruction pattern
		shr	 pb, #29	       	' isolate count
		jmp	 #jit_emit	        ' and output the pattern

		''
		'' compile a pushim instruction
		''
compile_immediate_routine
		rdlong	temp, ptrb++			' fetch the immediate
		sets	pushim_instr_pat+2, temp	' set the low bits
		shr	temp, #9	 		' extract upper 23 bits
		and	pushim_instr_pat+1, ##$FF800000	' zero out immediate bits of augment
		or	pushim_instr_pat+1, temp		' and now set them to correct values

		mov	jit_instrptr, #pushim_instr_pat
		mov	pb, #3
		jmp	#jit_emit			' go emit the whole augmented instruction

		''
		'' compile a conditional direct branch
		''
compile_jneg_instr_routine
		mov	jit_instrptr, #compare_instr_pat
		callpb	#2, #jit_emit			' emit the compare
		mov	jit_condition, #%1100		' condition for IF_C
		rdlong	jit_instrptr, ptrb++		' get new PC
		jmp	#jit_emit_direct_branch		' and now compile the branch

compile_jz_instr_routine
		mov	jit_instrptr, #compare_instr_pat
		callpb	#2, #jit_emit			' emit the compare
		mov	jit_condition, #%1010		' condition for IF_Z
		rdlong	jit_instrptr, ptrb++		' get new PC
		jmp	#jit_emit_direct_branch		' and now compile the branch

		'' compile a halt
		'' this is basically a standard pattern, but also needs to force
		'' a cache line close (it's kind of like a jump)
compile_halt_routine
		mov	jit_instrptr, #halt_instr_pat
		callpb	#4, #jit_emit
		'' force cache line close
		mov	 jit_condition, #0  ' NO-OP branch, to force close
		mov	 jit_instrptr, #0
		jmp	 #jit_emit_direct_branch
		
		'' patterns for runtime code

halt_instr_pat
		'' four instructions (including an augs)
		drvnot	#57
		waitx	##20_000_000
		jmp	#\halt_instr_pat		' as always, use absolute branch in generated code

		'' three instructions:
		'' wrlong tos, ptra++
		'' mov tos, ##x
		'' pushim_instr_pat+1 is the augment
		'' pushim_instr_pat+2 is the actual move instruction
pushim_instr_pat
		wrlong	tos, ptra++
		mov	tos, ##0


load_instr_pat
		rdlong	tos, tos

store_instr_pat
		mov	temp, tos
		rdlong	tos, --ptra
		wrlong	tos, temp
		rdlong	tos, --ptra

add_instr_pat
		mov	temp, tos
		rdlong	tos, --ptra
		add	tos, temp

sub_instr_pat
		mov	temp, tos
		rdlong	tos, --ptra
		sub	tos, temp

compare_instr_pat
		cmps	tos, #0 wcz
		rdlong	tos, --ptra
		'' for jz we emit a direct branch if_z
		'' for jneg we emit a direct branch if_c

pinlo_instr_pat
		drvl	tos
		rdlong	tos, --ptra

pinhi_instr_pat
		drvh	tos
		rdlong	tos, --ptra

delay_instr_pat
		waitx	tos
		rdlong	tos, --ptra

getcnt_instr_pat
		wrlong	tos, ptra++
		getct	tos

prhex_instr_pat
		mov	uart_num, tos
		rdlong	tos, --ptra
		call	#\ser_hex	' make sure to use absolute not relative addressing

prstr_instr_pat
		mov	uart_str, tos
		rdlong	tos, --ptra
		call	#\ser_str	' must be an absolute address!

dup_instr_pat
		wrlong	tos, ptra++

swap_instr_pat
		rdlong	temp, --ptra
		wrlong	tos, ptra++
		mov	tos, temp
		
		'' variables
uart_char	long 0

uart_num
uart_str	long 0

tos		long 0
jit_temp
temp		long 0
memp		long 0

		'' opcode table
		'' for this VM we use a pretty straightforward mapping of
		'' instructions to patterns
		'' the only real exception are the jump functions
		'' the longest possible pattern is 7 instructions (we're not there yet)
		'' or 3 bits; so we're going to compress this table as follows:
		''   low 20 bits: address of compilation routine
		''   upper 12 bits: argument for compilation routine, consisting of:
		''       3 bits length of pattern
		''       9 bits COG address of pattern
		'' we've left 20 bits for the compilation routine just in case we need
		'' to put some in HUB, but for now we'll try to fit them in COG
		''
opcode_table
{00}		long	compile_halt_routine
{01}		long	compile_immediate_routine
{02}		long	(1<<29) + (load_instr_pat<<20) + std_compiler_routine
{03}            long    (4<<29) + (store_instr_pat<<20) + std_compiler_routine

{04}		long	(3<<29) + (add_instr_pat<<20) + std_compiler_routine
{05}		long	(3<<29) + (sub_instr_pat<<20) + std_compiler_routine
{06}		long	compile_jz_instr_routine
{07}		long	compile_jneg_instr_routine

{08}		long	(2<<29) + (pinlo_instr_pat<<20) + std_compiler_routine
{09}		long	(2<<29) + (pinhi_instr_pat<<20) + std_compiler_routine
{0A}		long	(3<<29) + (prstr_instr_pat<<20) + std_compiler_routine
{0B}		long	(3<<29) + (prhex_instr_pat<<20) + std_compiler_routine

{0C}		long	(2<<29) + (getcnt_instr_pat<<20) + std_compiler_routine
{0D}		long	(2<<29) + (delay_instr_pat<<20) + std_compiler_routine
{0E}		long	(1<<29) + (dup_instr_pat<<20) + std_compiler_routine
{0F}		long	(3<<29) + (swap_instr_pat<<20) + std_compiler_routine

#include "jit_engine.spinh"

jit_base_of_cache_mem
		long	$40000
jit_top_of_cache_mem
		long	$48000 - 16
jit_condition
		res	1
jit_instr
		res	1
jit_instrptr
		res	1
jit_cachepc
		res	1
jit_orig_cachepc
		res	1
temp2
		res	1

		fit	$1e0
		
		orgh
start_message
		byte "JIT sample program", 13, 10, 0

		alignl
CACHE_BASE
		long 0[CACHE_SIZE]
CACHE_END


